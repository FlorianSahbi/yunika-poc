// This file was generated by the storyblok CLI.
// DO NOT MODIFY THIS FILE BY HAND.
import type { ISbStoryData } from "storyblok";
export interface AssetStoryblok {
  alt: string | null;
  copyright?: string | null;
  fieldtype: "asset";
  id: number;
  filename: string | null;
  name: string;
  title: string | null;
  focus: string | null;
  meta_data?: {
    [k: string]: any;
  };
  source?: string | null;
  is_external_url?: boolean;
  is_private?: boolean;
  src?: string;
  updated_at?: string;
  width?: number | null;
  height?: number | null;
  aspect_ratio?: number | null;
  public_id?: string | null;
  content_type?: string;
  [k: string]: any;
}

export interface RichtextStoryblok {
  type: string;
  content?: RichtextStoryblok[];
  marks?: RichtextStoryblok[];
  attrs?: any;
  text?: string;
  [k: string]: any;
}

export interface ArtistStoryblok {
  media?: AssetStoryblok;
  name?: string;
  description?: RichtextStoryblok;
  component: "artist";
  _uid: string;
  [k: string]: any;
}

export interface ButtonStoryblok {
  label?: string;
  component: "button";
  _uid: string;
  [k: string]: any;
}

export interface CamberStoryblok {
  media?: AssetStoryblok;
  title?: string;
  description?: RichtextStoryblok;
  component: "camber";
  _uid: string;
  [k: string]: any;
}

export interface CollectionStoryblok {
  title?: string;
  subtitle?: string;
  products?: (ISbStoryData<SnowboardStoryblok> | string)[];
  collections?: (ISbStoryData<CollectionStoryblok> | ISbStoryData<SnowboardStoryblok> | string)[];
  component: "collection";
  _uid: string;
  [k: string]: any;
}

export interface CommitmentStoryblok {
  media?: AssetStoryblok;
  title?: string;
  subtitle?: string;
  component: "commitment";
  _uid: string;
  [k: string]: any;
}

export type MultilinkStoryblok =
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      anchor?: string;
      rel?: string;
      title?: string;
      prep?: string;
      linktype: "story";
      story?: {
        name: string;
        created_at?: string;
        published_at?: string;
        id: number;
        uuid: string;
        content?: {
          [k: string]: any;
        };
        slug: string;
        full_slug: string;
        sort_by_date?: null | string;
        position?: number;
        tag_list?: string[];
        is_startpage?: boolean;
        parent_id?: null | number;
        meta_data?: null | {
          [k: string]: any;
        };
        group_id?: string;
        first_published_at?: string;
        release_id?: null | number;
        lang?: string;
        path?: null | string;
        alternates?: any[];
        default_full_slug?: null | string;
        translated_slugs?: null | any[];
        [k: string]: any;
      };
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      linktype: "url";
      rel?: string;
      title?: string;
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      email?: string;
      linktype: "email";
      [k: string]: any;
    }
  | {
      fieldtype: "multilink";
      id: string;
      url: string;
      cached_url: string;
      target?: "_blank" | "_self";
      linktype: "asset";
      [k: string]: any;
    };

export interface CtaStoryblok {
  link?: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  label?: string;
  component: "cta";
  _uid: string;
  [k: string]: any;
}

export interface DetailsStoryblok {
  component: "details";
  _uid: string;
  [k: string]: any;
}

export interface DoubleImagesStoryblok {
  items?: DoubleImagesBlockStoryblok[];
  component: "double images";
  _uid: string;
  [k: string]: any;
}

export interface DoubleImagesBlockStoryblok {
  color?: string;
  media?: AssetStoryblok;
  cta?: CtaStoryblok[];
  title?: string;
  subtitle?: string;
  rich?: RichtextStoryblok;
  component: "double images block";
  _uid: string;
  [k: string]: any;
}

export interface FeatureStoryblok {
  name?: string;
  component: "feature";
  _uid: string;
  [k: string]: any;
}

export interface FeaturesStoryblok {
  title?: string;
  description?: string;
  media?: AssetStoryblok;
  component: "features";
  _uid: string;
  [k: string]: any;
}

export interface FooterStoryblok {
  logo?: AssetStoryblok;
  background?: AssetStoryblok;
  socials?: SocialStoryblok[];
  title?: string;
  list?: CommitmentStoryblok[];
  component: "footer";
  _uid: string;
  [k: string]: any;
}

export interface GridStoryblok {
  columns?: (
    | ArtistStoryblok
    | ButtonStoryblok
    | CamberStoryblok
    | CollectionStoryblok
    | CommitmentStoryblok
    | CtaStoryblok
    | DetailsStoryblok
    | DoubleImagesStoryblok
    | DoubleImagesBlockStoryblok
    | FeatureStoryblok
    | FeaturesStoryblok
    | FooterStoryblok
    | GridStoryblok
    | HeaderStoryblok
    | HeroStoryblok
    | ImageEditoStoryblok
    | PageStoryblok
    | RatingStoryblok
    | SlideStoryblok
    | SnowboardStoryblok
    | SocialStoryblok
    | TechStoryblok
    | TypeStoryblok
  )[];
  component: "grid";
  _uid: string;
  [k: string]: any;
}

export interface HeaderStoryblok {
  logo?: AssetStoryblok;
  brand?: string;
  links?: (ISbStoryData<CollectionStoryblok> | ISbStoryData<SnowboardStoryblok> | string)[];
  component: "header";
  _uid: string;
  [k: string]: any;
}

export interface HeroStoryblok {
  slides?: SlideStoryblok[];
  component: "hero";
  _uid: string;
  [k: string]: any;
}

export interface ImageEditoStoryblok {
  items?: DoubleImagesBlockStoryblok[];
  component: "image edito";
  _uid: string;
  [k: string]: any;
}

export interface PageStoryblok {
  body?: (
    | ArtistStoryblok
    | ButtonStoryblok
    | CamberStoryblok
    | CollectionStoryblok
    | CommitmentStoryblok
    | CtaStoryblok
    | DetailsStoryblok
    | DoubleImagesStoryblok
    | DoubleImagesBlockStoryblok
    | FeatureStoryblok
    | FeaturesStoryblok
    | FooterStoryblok
    | GridStoryblok
    | HeaderStoryblok
    | HeroStoryblok
    | ImageEditoStoryblok
    | PageStoryblok
    | RatingStoryblok
    | SlideStoryblok
    | SnowboardStoryblok
    | SocialStoryblok
    | TechStoryblok
    | TypeStoryblok
  )[];
  component: "page";
  _uid: string;
  [k: string]: any;
}

export interface RatingStoryblok {
  label?: string;
  value?: string;
  component: "rating";
  _uid: string;
  [k: string]: any;
}

export interface SlideStoryblok {
  title?: string;
  subtitle?: string;
  buttons?: ButtonStoryblok[];
  background?: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  media?: AssetStoryblok;
  component: "slide";
  _uid: string;
  [k: string]: any;
}

export type MultiassetStoryblok = {
  alt: string | null;
  copyright?: string | null;
  fieldtype: "asset";
  id: number;
  filename: string | null;
  name: string;
  title: string | null;
  focus: string | null;
  meta_data?: {
    [k: string]: any;
  };
  source?: string | null;
  is_external_url?: boolean;
  is_private?: boolean;
  src?: string;
  updated_at?: string;
  width?: number | null;
  height?: number | null;
  aspect_ratio?: number | null;
  public_id?: string | null;
  content_type?: string;
  [k: string]: any;
}[];

export interface SnowboardStoryblok {
  media?: MultiassetStoryblok;
  title?: string;
  price?: string;
  description?: RichtextStoryblok;
  types?: (ISbStoryData<TypeStoryblok> | string)[];
  rating?: RatingStoryblok[];
  camber?: CamberStoryblok[];
  artist?: ISbStoryData<ArtistStoryblok> | string;
  tech?: TechStoryblok[];
  features?: any[];
  component: "snowboard";
  _uid: string;
  [k: string]: any;
}

export interface SocialStoryblok {
  iconName?: "facebook" | "twitter" | "x" | "instagram";
  link?: Exclude<MultilinkStoryblok, {linktype?: "email"} | {linktype?: "asset"}>;
  component: "social";
  _uid: string;
  [k: string]: any;
}

export interface TableStoryblok {
  thead: {
    _uid: string;
    value?: string;
    component: number;
    [k: string]: any;
  }[];
  tbody: {
    _uid: string;
    body: {
      _uid?: string;
      value?: string;
      component?: number;
      [k: string]: any;
    }[];
    component: number;
    [k: string]: any;
  }[];
  [k: string]: any;
}

export interface TechStoryblok {
  title?: string;
  table?: TableStoryblok;
  component: "tech";
  _uid: string;
  [k: string]: any;
}

export interface TypeStoryblok {
  label?: string;
  component: "type";
  _uid: string;
  [k: string]: any;
}
